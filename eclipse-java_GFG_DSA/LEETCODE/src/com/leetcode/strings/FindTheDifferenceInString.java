package com.leetcode.strings;

import java.util.HashMap;
import java.util.Map;

/*
 * You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.
Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:
Input: s = "", t = "y"
Output: "y"
 */
public class FindTheDifferenceInString {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String s = "a";
		String t = "aa";
		char res = findDifferenceString(s, t);
		System.out.println(res + " ");
	}

	private static char findDifferenceString(String s, String t) {
		// TODO Auto-generated method stub

		Map<Character, Integer> freqMap = new HashMap<>();

		// Count the frequency of characters in string t
		for (char ch : t.toCharArray()) {
			freqMap.put(ch, freqMap.getOrDefault(ch, 0) + 1);
		}

		// Decrement the frequency of characters in string s
		for (char ch : s.toCharArray()) {
			freqMap.put(ch, freqMap.getOrDefault(ch, 0) - 1);
		}

		// Find the character with a positive frequency in t
		for (char ch : freqMap.keySet()) {
			if (freqMap.get(ch) > 0) {
				return ch;
			}
		}

		return '\0'; // Return null character if no additional character is found
	}
}
/*
 * this takes 2ms of time 
 * 
 * class Solution {
    public char findTheDifference(String s, String t) {
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        for(int i = 0; i < s.length(); i++){
            arr1[s.charAt(i) - 97]++;
            arr2[t.charAt(i) - 97]++;
        }
        arr2[t.charAt(t.length() - 1) - 97]++;
        for(int i = 0; i < 26; i++){
            if(arr1[i] != arr2[i])
                return (char) (i + 97);
        }
        return 0;
    }
}
 * 
 * 
 
 */
